[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nfrom faicons import icon_svg\n\n# Set a constant UPDATE INTERVAL for all live data\nUPDATE_INTERVAL_SECS: int = 1\n\n# Add deque for readings\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Initialize a REACTIVE CALC to get the latest data and display it\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic: Get random temperature between -18 and -16 C, rounded to 1 decimal place\n    temp = round(random.uniform(-18, -16), 1)\n\n    # Get the current timestamp and format it\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()    \n\n    # Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n    \n    # Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n# Define the page options: title and fillable width\nui.page_opts(title=\"PyShiny Express: Live Data (Fancy)\", fillable=True)\n\n# Define the sidebar with relevant information\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\"A demonstration of real-time temperature readings in Antarctica.\", class_=\"text-center\")\n\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n\n    ui.hr()\n\n    ui.h6(\"Links:\")\n\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/dgraves4/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n\n    ui.a(\n        \"GitHub App\",\n        href=\"\",\n        target=\"_blank\",\n    )\n\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C\"\n\n        \"warmer than usual\"\n\n  \n\nwith ui.card(full_screen=True):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Current Data (placeholder only)\")\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Current Chart (placeholder only)\")", "type": "text"}]